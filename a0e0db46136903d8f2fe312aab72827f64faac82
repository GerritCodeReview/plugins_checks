{
  "comments": [
    {
      "key": {
        "uuid": "1edc4054_5cb2eecf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "Isn\u0027t \"pending\" just another predicate that we can apply to a check? Why not go all the way and make this /checks~checks/?q\u003dchecker:\u003cuuid\u003e+state:\u003cstate\u003e+is:pending?",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "865a2cd2_02d9d862",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "I agree, I will rename the REST endpoint in a follow-up change.\n\u0027is:\u0027 operators will be also added in a follow-up change (I already had planned to add them).",
      "parentUuid": "1edc4054_5cb2eecf",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ef3841f_c2dc6976",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T09:23:01Z",
      "side": 1,
      "message": "\u003e I agree, I will rename the REST endpoint in a follow-up change.\n\nOn a second thought I think it\u0027s maybe better to keep this as dedicated endpoint for pending checks. I think so because the response JSON was especially designed to support the list pending checks use case (e.g. it\u0027s extensible so that we can return additional change data in future). If we think about a general Query Checks endpoint the result would be rather a list of plain CheckInfo\u0027s. \n\nNow as I talked with Alice about this, we think we had this discussion before and that was the reason why we went for \u0027checks.pending\u0027 rather than just \u0027checks\u0027.",
      "parentUuid": "865a2cd2_02d9d862",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "605f1764_527d70b9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T10:49:29Z",
      "side": 1,
      "message": "\u003e \u0027is:\u0027 operators will be also added in a follow-up change (I already had planned to add them)\n\nDone in [1,2].\n\n[1] https://gerrit-review.googlesource.com/c/plugins/checks/+/219196\n[2] https://gerrit-review.googlesource.com/c/plugins/checks/+/219197",
      "parentUuid": "4ef3841f_c2dc6976",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2a6ad2d_ed4a2693",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-27T14:54:27Z",
      "side": 1,
      "message": "Ack, I wasn\u0027t thinking about the return type.",
      "parentUuid": "605f1764_527d70b9",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9cd0bcc_c525c68b",
        "filename": "java/com/google/gerrit/plugins/checks/Check.java",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "ChangeData is a pretty heavyweight dependency, can this just take a Project.NameKey?",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62ce8299_bb1f06e0",
        "filename": "java/com/google/gerrit/plugins/checks/Check.java",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9cd0bcc_c525c68b",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0714ea87_7fe8942e",
        "filename": "java/com/google/gerrit/plugins/checks/api/CheckState.java",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "return Enums.getIfPresent(CheckState.class, checkState).toJavaUtil()\n\nAlthough depending on how many callers there are, you may just want to inline the method.",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ca1136c_363cf7fe",
        "filename": "java/com/google/gerrit/plugins/checks/api/CheckState.java",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "Ah, I knew there was already a utility that does this, but I was looking for Enums.tryParse(...) :(\n\nThanks. Done. I inlined it since there was only a single caller.",
      "parentUuid": "0714ea87_7fe8942e",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f331c655_f6717e88",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "Nit: reflow lines.",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cd934c3_f490f76b",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f331c655_f6717e88",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "758651a9_d2c1ebe1",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "This doesn\u0027t support queries of the form \"checker:uuid (state:X OR state:Y)\". This was previously supported by passing ?state\u003dX\u0026state\u003dY\n\nCan we loosen the restrictions? I think the only restriction we need is: the top-level predicate must either be CheckerPredicate or AND with a single CheckerPredicate as a direct child. Allow any combination of AND/OR/NOT as children of that top-level AND.",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f360d3f0_840632da",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "\u003e This doesn\u0027t support queries of the form \"checker:uuid (state:X OR state:Y)\".\n\u003e This was previously supported by passing ?state\u003dX\u0026state\u003dY\n\nNo, this should work. It\u0027s tested by ListPendingChecksIT#listPendingChecksForMultipleSpecifiedStates(). Note that it\u0027s the ListPendingChecksIT#buildQueryString(...) method which combines the states in the query by OR.\n\n\u003e Can we loosen the restrictions? I think the only restriction we need is: the top-level\n\u003e predicate must either be CheckerPredicate or AND with a single CheckerPredicate as a\n\u003e direct child. Allow any combination of AND/OR/NOT as children of that top-level AND.\n\nI think that is exactly the current behavior :)\nAdded comments below to make this more clear and also added one more test.\nMaybe you got mislead by the error message below? Any suggestion how to improve it?",
      "parentUuid": "758651a9_d2c1ebe1",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cfdd25c_e6af275f",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-27T14:54:27Z",
      "side": 1,
      "message": "Huh. I think I thought validateQuery was recursive or something.",
      "parentUuid": "f360d3f0_840632da",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ff10f7b_33e31fe0",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "s/\u003d/:/ here and below",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e47165df_832c68be",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ff10f7b_33e31fe0",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09305875_c9946baf",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 185,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "I don\u0027t think you want to recurse here. This would allow e.g. \"-checker:uuid state:foo\" where the CheckerPredicate is a child of a NotPredicate.",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dde11130_e399cbfa",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 185,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "That\u0027s intended. This method is supposed to count checker predicates in the query, no matter on which level they appears. This method is only used ensure that a query contains exactly 1 checker predicate. That this one checker predicate appears in the right place is then validated by the other conditions in the validateQuery method.",
      "parentUuid": "09305875_c9946baf",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b48c8f10_40fc0157",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 185,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-27T14:54:27Z",
      "side": 1,
      "message": "Maybe add a comment that this method isn\u0027t intended to validate that checker predicates appear in any particular location?",
      "parentUuid": "dde11130_e399cbfa",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7f61c9f_5e143348",
        "filename": "java/com/google/gerrit/plugins/checks/api/ListPendingChecks.java",
        "patchSetId": 4
      },
      "lineNbr": 185,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T16:35:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b48c8f10_40fc0157",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65376449_9130f54a",
        "filename": "java/com/google/gerrit/plugins/checks/index/CheckStatePredicate.java",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "I would expect this to match the semantics for ChangeStatusPredicate. Ok, maybe we don\u0027t need to do the prefix tree thing, but at the very least support lowercase values.",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aec1d1ae_60e68336",
        "filename": "java/com/google/gerrit/plugins/checks/index/CheckStatePredicate.java",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "CheckState.tryParse(value) was accepting any case. Now we use Enums.getIfPresent(CheckState.class, value) to convert the string to enum and it accepts any case too.\n\nIt\u0027s also tested by ListPendingChecks#listPendingChecksForSpecifiedStateDifferentCases().",
      "parentUuid": "65376449_9130f54a",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34a09e3d_2862c246",
        "filename": "java/com/google/gerrit/plugins/checks/index/CheckerPredicate.java",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-26T17:05:14Z",
      "side": 1,
      "message": "requireNonNull",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9296195f_05a55911",
        "filename": "java/com/google/gerrit/plugins/checks/index/CheckerPredicate.java",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-27T08:53:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34a09e3d_2862c246",
      "revId": "a0e0db46136903d8f2fe312aab72827f64faac82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}