{
  "comments": [
    {
      "key": {
        "uuid": "d26ad2c5_8d7af7b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 19,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-03-22T17:30:05Z",
      "side": 1,
      "message": "Does this include the change ID for you as well?",
      "range": {
        "startLine": 19,
        "startChar": 4,
        "endLine": 19,
        "endChar": 16
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea57ccc9_5599ef78",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-03-22T17:30:05Z",
      "side": 1,
      "message": "There\u0027s one code path which is currently not covered via ChecksSubmitRule#evaluate.",
      "range": {
        "startLine": 24,
        "startChar": 41,
        "endLine": 25,
        "endChar": 31
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fedae67_d2d4db00",
        "filename": "BUILD",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-03-22T17:30:05Z",
      "side": 1,
      "message": "Optional: Just for my education, why is the proto reference here and not in checks-deps-neverlink?",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 50
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f5aeaed_4e9ea46e",
        "filename": "BUILD",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-22T17:49:43Z",
      "side": 1,
      "message": "tl;dr neverlink is like provided deps in Maven.\n\nNormally (neverlink\u003dFalse), Bazel will put the .class files corresponding to all transitive java_library deps into the jar produced by a java_binary target (which is what a gerrit_plugin is). We don\u0027t want to do that for deps that we know are already in gerrit.war, because then we would have identical (or worse, non-identical) class files in both gerrit.war and checks.jar. By setting neverlink\u003dTrue, we tell Bazel that any transitive deps that only come in via this library should not have their class files in the resulting java_binary.\n\nFor cache_java_proto, obviously we do want the .class files built from the generated proto .java files, because they\u0027re not part of core.\n\nI would be fine renaming the neverlink target to something more transparent; I was just following the naming convention of other neverlink targets in core (which are also probably confusing).\n\n(By the way, you might be wondering why this is the *only* non-neverlink dep, i.e. why we don\u0027t define smaller libraries in BUILD files under plugins/checks/java/com/google/gerrit/plugins/checks/.... The answer is I tried that, but then there were no srcs in gerrit_plugin itself, and I couldn\u0027t figure out how to make the gerrit_plugin macro work with only deps and no srcs: I1d1eab716. There\u0027s probably a middle ground, e.g. non-recursively glob jcgg/plugins/checks/*.java in this BUILD file and allow for other subpackages, but I was tired of writing BUILD rules.)",
      "parentUuid": "5fedae67_d2d4db00",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 50
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82c5ba10_d85497b2",
        "filename": "java/com/google/gerrit/plugins/checks/CombinedCheckStateCache.java",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-03-22T17:30:05Z",
      "side": 1,
      "message": "Do we have a test which ensures that we don\u0027t do too many writes?",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 31
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a098e40_4b79bebb",
        "filename": "java/com/google/gerrit/plugins/checks/Module.java",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-03-22T17:30:05Z",
      "side": 1,
      "message": "Does this automatically work for GetDetail as well?",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c41ffc0a_8ef26c80",
        "filename": "java/com/google/gerrit/plugins/checks/Module.java",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-22T17:59:26Z",
      "side": 1,
      "message": "Yes, the plugin tests enforce this:\n\nhttps://gerrit.googlesource.com/gerrit/+/633b812c5836f493ce37aa30901fca8c80861471/javatests/com/google/gerrit/acceptance/rest/change/PluginFieldsIT.java#65\n\n(But it\u0027s possible I forgot to document it in the actual plugin docs.)",
      "parentUuid": "4a098e40_4b79bebb",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40d8e968_2177b133",
        "filename": "java/com/google/gerrit/plugins/checks/api/ChangeCheckAttributeFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 81,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-03-22T17:30:05Z",
      "side": 1,
      "message": "Optional: opts can never be null as line 56 would already catch it.",
      "range": {
        "startLine": 81,
        "startChar": 8,
        "endLine": 81,
        "endChar": 20
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a6b67d2_4fdd358d",
        "filename": "java/com/google/gerrit/plugins/checks/db/NoteDbChecksUpdate.java",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-03-22T17:30:05Z",
      "side": 1,
      "message": "Do you think that this is fast enough (even for a high rate of updates), so that\n1) we can do in synchronously as currently and that\n2) we always recompute the combined state from scratch? (Alternatively, we could compare the state of the check with the old combined check state and only do the reload if something would change.)",
      "range": {
        "startLine": 215,
        "startChar": 6,
        "endLine": 219,
        "endChar": 7
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe3034b7_fc71eb0e",
        "filename": "java/com/google/gerrit/plugins/checks/db/NoteDbChecksUpdate.java",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-22T17:59:26Z",
      "side": 1,
      "message": "I considered doing it async in the fanout injector but decided it sounded like premature optimization. I can still do it if you\u0027re concerned.\n\nI could also add a metric to reload so we can measure the cost. (We already have a cache metric for the average load time when LoadingCache invokes the loader, but a) it\u0027s not a histogram, and b) reload doesn\u0027t call LoadingCache#get so it won\u0027t record the metric.)",
      "parentUuid": "1a6b67d2_4fdd358d",
      "range": {
        "startLine": 215,
        "startChar": 6,
        "endLine": 219,
        "endChar": 7
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "502580b4_3662a884",
        "filename": "javatests/com/google/gerrit/plugins/checks/acceptance/api/ChangeCheckInfoIT.java",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-03-22T17:30:05Z",
      "side": 1,
      "message": "Updates",
      "range": {
        "startLine": 157,
        "startChar": 32,
        "endLine": 157,
        "endChar": 38
      },
      "revId": "fccd52270661ed2850ac0e9cd3f637b514d90fb6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}