{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1551400450 -0800\nnonce AC6AUtOnUYFaQkhmljLZGAa4KcPXZNu4IC5UMkYN0hpMohQScNCS+vLzwj6Ae5QAc7WR4n8mw3Ju\n\n0000000000000000000000000000000000000000 2de7bb0eecea8a836d09fa9a082973684593ffd5 refs/for/master%r\u003dhiesel@google.com,r\u003dhanwen@google.com\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlx4fgIVHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiM0sAP/RDrB4AFUh1Xme0yJqD+dFOHgRJz\npngAsQ4a9X4XM7Lb87jZHtwvH6LFeM4UIk/WYAH1JbkBC7jPomFXuVelHD8z6wYa\nUA+dFdOh9OQYWNY7ZPYeFMOScAvTf1IsE00xm1BvGW3ifV0BrZtksaIjaP//aa2h\nUuis6yLTiKiXnH1npIZEzKgVfRhzlggvfQZyd4qiPCfqk+7jbAL7wqHw8JBZ6yc+\nDHdTbAnwLBKVFkNTdd7bb0+8DTayV2gA05nD4PIxov97+rTvqo2c7bXvQ2MX8H6Q\nmbnaeA6gGeMv+HQhy9wXqTaxdnx5eskIuIFOB/5yDD9oht6S1SjlmbJOZxZaf6Jx\nIGIza5OJK8dRsJX7xf2MvcPTtIaPEkLAL0IwcjnA7GL4e+l5vPO1ZWqw50sGSZ9K\nf2X6GAFW8hGOGDnjT+jmPZIcqVcmDCJ1G376KXLKMpOkFkz1C7cFCRZabRrA89Tk\ndK7zRgy6uZlfuTzkkJaw/H4z6OHypf4DcLhmPh2oqrzH6lTHcMLD0kP6hngpwhPO\n/luxB3nAuFFMYW8jye5vXzSWFWtNWAaW5+qIErSarLyg1S+dcvSKTYf3pC2ZREAg\nmUh//dyMG7G2416OhDhQ7l5ME1ss57vGthneeyVo99eQBi+fFPfnrv3XZUJFrDb4\nFG/93Dc05oIanMnF\n\u003dRmke\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "fa9785f9_285738d2",
        "filename": "java/com/google/gerrit/plugins/checks/Checker.java",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "\"name\"",
      "range": {
        "startLine": 42,
        "startChar": 32,
        "endLine": 42,
        "endChar": 43
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f84bdaf7_bf871617",
        "filename": "java/com/google/gerrit/plugins/checks/Checker.java",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-06T16:46:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa9785f9_285738d2",
      "range": {
        "startLine": 42,
        "startChar": 32,
        "endLine": 42,
        "endChar": 43
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3720bd27_821c8ddc",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerCreation.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "Why did we remove the name here?",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a83cb4b5_7c17e3d0",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerCreation.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-04T16:59:01Z",
      "side": 1,
      "message": "CheckerCreation only contains required fields. Any optional fields get set by the CheckerUpdate. (And we support combining both a Creation and an Update during the creation operation.)",
      "parentUuid": "3720bd27_821c8ddc",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c4cf12c_d48a3ecc",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-01T17:24:25Z",
      "side": 1,
      "message": "After sleeping on it, these restrictions may be a little silly, particularly the case-insensitivity of the scheme. I\u0027m sure we could bikeshed this forever.\n\nSome alternatives:\n\n* Remove all restrictions on scheme other than that it can\u0027t contain : \\0 or \\n\n* Make the whole thing a URI. The scheme is a scheme, still case-insensitive. Still allows any characters, but they need to be percent-encoded.\n* Impose some other arbitrary restrictions (e.g. alphanumeric, spaces, some punctuation) and apply them equally to scheme and id.\n\nRight now I\u0027m slightly leaning towards making the whole thing a URI, because then we can just use standard libraries for parsing.",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "612126ff_9801a9c7",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-03-04T13:25:43Z",
      "side": 1,
      "message": "URI seems good to me.\n\nwe\u0027d have to write some doc to point out that the HTTP URL of the service is not a good ID in this case, because they always have scheme \u0027http\u0027.",
      "parentUuid": "0c4cf12c_d48a3ecc",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d780146_030ab44e",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-04T16:44:58Z",
      "side": 1,
      "message": "Ok, will rework this change based on URIs, using java.net.URI as the type. Undecided so far whether we should make CheckerUuid a wrapper around URI (slight preference), or to store URI directly.\n\nI think I will add one more restriction: URIs must be \"opaque\", meaning the part after the schema does not start with a /. This prevents the URI library from attemptig to parse it further (https://docs.oracle.com/javase/8/docs/api/java/net/URI.html). It also disallows http:// URLs, which is a feature.",
      "parentUuid": "612126ff_9801a9c7",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25689b37_83894a95",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-03-04T16:49:40Z",
      "side": 1,
      "message": "I agree on hiding URI as a implementation detail of CheckerUuid.",
      "parentUuid": "8d780146_030ab44e",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12431686_d89d7d97",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-04T16:51:43Z",
      "side": 1,
      "message": "Ok, will do.\n\nMinor clarification: Requiring RFC3986 valid URIs is part of the public-facing API spec. Using java.net.URI as the implementation is an implementation detail.",
      "parentUuid": "25689b37_83894a95",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0e102b2_378b9c44",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "(I had some concerns here but they are all resolved by using Java8\u0027s opaque URIs)",
      "parentUuid": "612126ff_9801a9c7",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c227b582_40fb9bed",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-06T16:46:54Z",
      "side": 1,
      "message": "I gave up on URIs and the latest patch set uses a restricted character set.",
      "parentUuid": "d0e102b2_378b9c44",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 50
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6734c592_90e21bde",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "nit: extra .",
      "range": {
        "startLine": 111,
        "startChar": 33,
        "endLine": 111,
        "endChar": 34
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cae2cfdd_a7075935",
        "filename": "java/com/google/gerrit/plugins/checks/CheckerUuid.java",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-06T16:46:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6734c592_90e21bde",
      "range": {
        "startLine": 111,
        "startChar": 33,
        "endLine": 111,
        "endChar": 34
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d0a2c28_be2fe7a6",
        "filename": "java/com/google/gerrit/plugins/checks/api/UpdateChecker.java",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "nit: CheckerUUID.isUuid(input.uuid)",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78f42db9_c7b41409",
        "filename": "java/com/google/gerrit/plugins/checks/api/UpdateChecker.java",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-06T16:46:54Z",
      "side": 1,
      "message": "That\u0027s not what this condition is checking. Added a comment to make it clear.",
      "parentUuid": "4d0a2c28_be2fe7a6",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39493583_788e6414",
        "filename": "java/com/google/gerrit/plugins/checks/db/CheckerConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "this is not always populated. make it an optional?",
      "range": {
        "startLine": 144,
        "startChar": 10,
        "endLine": 144,
        "endChar": 21
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea60e39e_cd5c9836",
        "filename": "java/com/google/gerrit/plugins/checks/db/CheckerConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-06T16:46:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39493583_788e6414",
      "range": {
        "startLine": 144,
        "startChar": 10,
        "endLine": 144,
        "endChar": 21
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "141586d9_b4077808",
        "filename": "java/com/google/gerrit/plugins/checks/db/CheckerConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "nit: remove? string format should call CheckerUUID#toString which also logs the schema which seems desired.",
      "range": {
        "startLine": 212,
        "startChar": 72,
        "endLine": 212,
        "endChar": 83
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4b91041_d48be5c4",
        "filename": "java/com/google/gerrit/plugins/checks/db/CheckerConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-04T16:59:01Z",
      "side": 1,
      "message": "I think I\u0027m already doing what you\u0027re saying. loadedChecker.get() is a Checker and .getUuid() is a CheckerUuid.",
      "parentUuid": "141586d9_b4077808",
      "range": {
        "startLine": 212,
        "startChar": 72,
        "endLine": 212,
        "endChar": 83
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa549b5a_e877b849",
        "filename": "java/com/google/gerrit/plugins/checks/db/CheckerConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "Given that, I think an optional would also be nice in the signature of readFromConfig",
      "range": {
        "startLine": 338,
        "startChar": 39,
        "endLine": 338,
        "endChar": 92
      },
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a6b58b4_29ee7b07",
        "filename": "java/com/google/gerrit/plugins/checks/db/CheckerConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-06T16:46:54Z",
      "side": 1,
      "message": "Optional really only makes sense in the specific case of CheckerConfigEntry.UUID. I don\u0027t think it\u0027s worth changing the signature of the rest of them just to support this one corner case.",
      "parentUuid": "aa549b5a_e877b849",
      "range": {
        "startLine": 338,
        "startChar": 39,
        "endLine": 338,
        "endChar": 92
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0612aecb_69b4dc58",
        "filename": "java/com/google/gerrit/plugins/checks/db/NoteDbCheckers.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "nit: This seems like an over-use of streams to me and I think it\u0027s easier to read as a plain old for loop.",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a791815_5f7b0c81",
        "filename": "java/com/google/gerrit/plugins/checks/db/NoteDbCheckers.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-06T16:46:54Z",
      "side": 1,
      "message": "I think what you\u0027re objecting to is the combination of maps and filters and a forEach with a block lambda. I actually think the LHS is not great either because it already combines a longish stream and a separate for loop. I took another stab at it, let me know what you think.",
      "parentUuid": "0612aecb_69b4dc58",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46f28111_6169ab5f",
        "filename": "src/main/resources/Documentation/rest-api-checkers.md",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-04T16:54:32Z",
      "side": 1,
      "message": "As discussed: Hide implementation details and just define what is supported.",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99975766_e053f589",
        "filename": "src/main/resources/Documentation/rest-api-checkers.md",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-06T16:46:54Z",
      "side": 1,
      "message": "Done. (Although I would argue that under the implementation in this patch set, the RFC3986 scheme *is* a definition of what is supported. Using/not using the java.net.URI class is the hidden implementation detail.)",
      "parentUuid": "46f28111_6169ab5f",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "2de7bb0eecea8a836d09fa9a082973684593ffd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}